// Copyright 2021 Cisco Systems, Inc. and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "api/v1alpha1/common.proto";
import "k8s.io/api/core/v1/generated.proto";
import "mesh/v1alpha1/config.proto";
import "gogoproto/gogo.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/wrappers.proto";

// $schema: istio-operator.api.v1alpha1.IstioControlPlaneSpec
// $title: Istio ControlPlane Spec
// $description: Istio control plane descriptor

package istio_operator.v2.api.v1alpha1;

option go_package = "github.com/banzaicloud/istio-operator/v2/api/v1alpha1";

// IstioControlPlane defines an Istio control plane
//
// <!-- crd generation tags
// +cue-gen:IstioControlPlane:groupName:servicemesh.cisco.com
// +cue-gen:IstioControlPlane:version:v1alpha1
// +cue-gen:IstioControlPlane:storageVersion
// +cue-gen:IstioControlPlane:annotations:helm.sh/resource-policy=keep
// +cue-gen:IstioControlPlane:subresource:status
// +cue-gen:IstioControlPlane:scope:Namespaced
// +cue-gen:IstioControlPlane:resource:shortNames=icp,istiocp
// +cue-gen:IstioControlPlane:printerColumn:name=Age,type=date,JSONPath=.metadata.creationTimestamp,description="CreationTimestamp is a timestamp
// representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations.
// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
// +cue-gen:IstioControlPlane:preserveUnknownFields:false
// -->
//
// <!-- go code generation tags
// +genclient
// +k8s:deepcopy-gen=true
// -->
message IstioControlPlaneSpec {
    // Contains the intended version for the Istio control plane.
    // +kubebuilder:validation:Pattern=^1.
    string version = 1 [(gogoproto.jsontag) = "version", (google.api.field_behavior) = REQUIRED];
    // Logging configurations.
    LoggingConfiguration logging = 2 [(gogoproto.jsontag) = "logging"];
    // A minimal set of requested resources to applied to all deployments so that
    // Horizontal Pod Autoscaler will be able to function (if set).
    // Each component can overwrite these default values by adding its own resources
    // block in the relevant section below and setting the desired resources values.
    k8s.io.api.core.v1.ResourceRequirements defaultResources = 3 [(gogoproto.jsontag) = "defaultResources"];
    // Use the user-specified, secret volume mounted key and certs for Pilot and workloads.
    google.protobuf.BoolValue mountMtlsCerts = 4 [(gogoproto.wktpointer) = true, (gogoproto.jsontag) = "mountMtlsCerts"];
    // Istiod configuration.
    IstiodConfiguration istiod = 5 [(gogoproto.jsontag) = "istiod"];
    // If SDS is configured, mTLS certificates for the sidecars will be distributed through the
    // SecretDiscoveryService instead of using K8S secrets to mount the certificates.
    SDSConfiguration sds = 6 [(gogoproto.jsontag) = "sds"];
    // Defines mesh-wide settings for the Istio control plane.
    istio.mesh.v1alpha1.MeshConfig mesh_config = 7;
}

// Comma-separated minimum per-scope logging level of messages to output, in the form of <scope>:<level>,<scope>:<level>
// The control plane has different scopes depending on component, but can configure default log level across all components
// If empty, default scope and level will be used as configured in code
message LoggingConfiguration {
    // +kubebuilder:validation:Pattern=`^([a-zA-Z]+:[a-zA-Z]+,?)+$`
    string level = 1 [(gogoproto.jsontag) = "level"];
}

// SDSConfiguration defines Secret Discovery Service config options
message SDSConfiguration {
    // The JWT token for SDS and the aud field of such JWT. See RFC 7519, section 4.1.3.
    // When a CSR is sent from Citadel Agent to the CA (e.g. Citadel), this aud is to make sure the
    // 	JWT is intended for the CA.
    string tokenAudience = 1 [(gogoproto.jsontag) = "tokenAudience"];
}

// IstiodConfiguration defines config options for Istiod
message IstiodConfiguration {
    // Standard Kubernetes resource configuration
    BaseK8sResourceConfigurationWithHPA k8sConfig = 1 [(gogoproto.jsontag) = "k8sConfig"];
    // If enabled, pilot will run Istio analyzers and write analysis errors to the Status field of any Istio Resources
    google.protobuf.BoolValue enableAnalysis = 2 [(gogoproto.wktpointer) = true, (gogoproto.jsontag) = "enableAnalysis"];
    // If enabled, pilot will update the CRD Status field of all Istio resources with reconciliation status
    google.protobuf.BoolValue enableStatus = 3 [(gogoproto.wktpointer) = true, (gogoproto.jsontag) = "enableStatus"];
    // Settings for local istiod to control remote clusters as well
    ExternalIstiodConfiguration externalIstiod = 4 [(gogoproto.jsontag) = "externalIstiod"];
    google.protobuf.FloatValue traceSampling = 5 [(gogoproto.wktpointer) = true];
    // If enabled, protocol sniffing will be used for outbound listeners whose port protocol is not specified or unsupported
    google.protobuf.BoolValue enableProtocolSniffingOutbound = 6 [(gogoproto.wktpointer) = true, (gogoproto.jsontag) = "enableProtocolSniffingOutbound"];
    // If enabled, protocol sniffing will be used for inbound listeners whose port protocol is not specified or unsupported
    google.protobuf.BoolValue enableProtocolSniffingInbound = 7 [(gogoproto.wktpointer) = true, (gogoproto.jsontag) = "enableProtocolSniffingInbound"];
    // Configure the certificate provider for control plane communication.
    // Currently, two providers are supported: "kubernetes" and "istiod".
    // As some platforms may not have kubernetes signing APIs,
    // Istiod is the default
    // +kubebuilder:validation:Enum=kubernetes;istiod
    PilotCertProviderType certProvider = 8 [(gogoproto.jsontag) = "certProvider"];
    // If present will be appended to the environment variables of the container
    repeated k8s.io.api.core.v1.EnvVar additionalEnvVars = 9 [(gogoproto.nullable) = false];
    // SPIFFE configuration of Pilot
    SPIFFEConfiguration spiffe = 10 [(gogoproto.jsontag) = "spiffe"];
}

// ExternalIstiodConfiguration defines settings for local istiod to control remote clusters as well
message ExternalIstiodConfiguration {
    google.protobuf.BoolValue enabled = 1 [(gogoproto.wktpointer) = true, (gogoproto.jsontag) = "enabled"];
}

enum PilotCertProviderType {
    Kubernetes = 0;
    Istiod = 1;
}

// SPIFFEConfiguration is for SPIFFE configuration of Pilot
message SPIFFEConfiguration {
    OperatorEndpointsConfiguration operatorEndpoints = 1 [(gogoproto.jsontag) = "operatorEndpoints"];
}

// OperatorEndpointsConfiguration defines config options for automatic SPIFFE endpoints
message OperatorEndpointsConfiguration {
    google.protobuf.BoolValue enabled = 1 [(gogoproto.wktpointer) = true, (gogoproto.jsontag) = "enabled"];
}

// <!-- go code generation tags
// +genclient
// +k8s:deepcopy-gen=true
// -->
message IstioControlPlaneStatus {
}
